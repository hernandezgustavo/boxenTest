#!/bin/bash
#
# Prepend the story ID and description (as parsed from the current branch name)
# to the commit message.
#

MESSAGE_FILE="$1"
BRANCH_CURRENT="$(git rev-parse --abbrev-ref HEAD)"
BRANCH_REGEX='\([0-9]*\)'

# Get the branch number of the current story, or nothing if the branch name does not
# start with the story number. Getting the story number from a branch is much harder
# than it should be, because:
#
# - grep on MSYSGIT is really really old
# - sed on Mac is really really old
# - expr in MSYSGIT is really really old
#
function __d62_parse_story_number() {
    STORY_NUM=$(expr "$BRANCH_CURRENT" : "$BRANCH_REGEX" 2>/dev/null)

    if [[ ! $? ]]; then
        # Windows expr doesn't know what : means. Use fallback if expr failed.
        STORY_NUM=$(expr match "$BRANCH_CURRENT" "$BRANCH_REGEX")
    fi

    echo $STORY_NUM
}

function __d62_prepend_story_id() {
    STORY_NUM=$1
    MESSAGE_FILE=$2

    # Prepend the story ID to the message file. OSX ships with a crazy (old)
    # version of sed, so newline characters must be converted rather than
    # interpolated.
    sed -i '' '1i\'$'\n'"$STORY_ID " $MESSAGE_FILE 2>/dev/null
    if [[ ! $? ]]; then
        # For some reason, MSYSGIT's sed is actually semi-recent
        sed -i "1 s/^/$STORY_ID /" $MESSAGE_FILE
    fi
}

STORY_ID=$(__d62_parse_story_number)
if [[ -z $STORY_ID ]]; then
    # Couldn't figure out what story this is. Warn the user, but continue
    echo "Warning: unable to determine story number from branch name" >&2
else
    __d62_prepend_story_id "$STORY_ID" "$MESSAGE_FILE"
fi
